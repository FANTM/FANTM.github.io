{
    "componentChunkName": "component---src-templates-documentation-template-jsx",
    "path": "/DEVLPR/software/devlprd",
    "result": {"data":{"site":{"siteMetadata":{"siteUrl":"https://FANTM.github.io"}},"mdx":{"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"slug\": \"/DEVLPR/software/devlprd\",\n  \"date\": \"2021-07-01\",\n  \"title\": \"devlprd\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, mdx(\"em\", {\n    parentName: \"p\"\n  }, \"This page is a stub\")), mdx(\"h2\", null, \"Overview\"), mdx(\"p\", null, \"Devlprd provides an API for connecting data streams coming from a FANTM DEVLPR to an end application via Websockets.\\nIt is most useful when using a FANTM DEVLPR for an application off the Arduino itself, such as connecting it to a game.\"), mdx(\"p\", null, \"Devlprd requires python 3, and you can just run \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"python3 devlprd.py\"), \".\"), mdx(\"h2\", null, \"Development\"), mdx(\"p\", null, \"Before you dig in, please consider that the usual case for adding topics is you need to add a data processing middleware layer, and you require direct access to the serial connection.\\nEven then, if you harness the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"raw\"), \" topic further up the stack you can avoid adding code here. This layer is agnostic to end applications, instead it provides different views of the data that can be used for any application.\"));\n}\n;\nMDXContent.isMDXComponent = true;","frontmatter":{"slug":"/DEVLPR/software/devlprd","title":"devlprd","date":"July 01, 2021"}}},"pageContext":{"slug":"/DEVLPR/software/devlprd"}},
    "staticQueryHashes": ["3135763025"]}